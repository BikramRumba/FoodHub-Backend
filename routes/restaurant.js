const router = require('express').Router();
const Restaurant = require('../model/Restaurant'); //importing restaurant schema to get the data
const Order = require('../model/Order'); //importing orderSchema to pass user input data in the database
const Review = require('../model/Review'); //Importing reviewSchema to pass data input

//  creates the restaurant and adds into the database
//  creating router to route in restaurant page

router.post('/createRestaurant', async (req, res) => {
	// parsing data from the body of schema that we created in Restaurant model
	const { name, email, address, menu } = req.body;
	const restaurant = new Restaurant({
		name,
		email,
		address,
		menu,
	});
	try {
		await restaurant.save();
	} catch (err) {
		console.log(err);
	}
});
/*  
 finding the restaurants with specific id and protecting the routes adding verify
 
 */
router.get('/:id', async (req, res) => {
	try {
		const restaurant = await Restaurant.findById(req.params.id); //id will be passing through postman body
		res.json({ message: restaurant });
	} catch (error) {
		res.json({ message: error });
	}
});

/* we need to updates restaurant and menu information
 we will use algorithm for updates.
  $set will update the body field
 */

//   Read the restaurant from the database
// router.get('/', async (req, res) => {
// 	Restaurant.find({}, (err, result) => {
// 		if (err) {
// 			res.send(err);
// 		}
// 		res.send(result);
// 	});
// });

// Updating the restaurant
router.put('/update', async (req, res) => {
	/* try {
		const updateRestaurant = await Restaurant.updateOne(
			{ _id: req.params.id }, //id is generated by postman and will be passing through req.params
			{
				$set: {
					name: req.body.name,
					email: req.body.email,
					address: req.body.address,
					menu: req.body.menu,
				},
			}
		);

		res.json({ message: updateRestaurant }); // we will be sending updated JSON file through message
	} catch (error) {
		res.json({ message: error });
	} */
	const { newName, newEmail, newAddress, newMenu, id } = req.body;
	try {
		await Restaurant.findById(id, (err, updatedRestaurant) => {
			updatedRestaurant.name = newName;
			updatedRestaurant.email = newEmail;
			updatedRestaurant.address = newAddress;
			updatedRestaurant.menu = newMenu;

			updatedRestaurant.save();
			res.send('Updated');
		});
	} catch (err) {
		console.log(err);
	}
});
/* We will be updating the menu
We need to find the restaurant by id and use $push to add element inside the menu array */
router.patch('/addmenu/:id', async (req, res) => {
	try {
		const updatedRestaurant = await Restaurant.findOneAndUpdate(
			{ _id: req.params.id },
			{
				$push: {
					menu: {
						name: req.body.name,
						item_price: req.body.item_price,
					},
				},
			}
		);
		res.json({ message: updatedRestaurant });
	} catch (err) {
		res.json({ message: err });
	}
});
/* If we need to delete the restaurant entity we
  need to get the restaurant id and remove it */
//   we need to make asynchronous functions because we need to wait to get the user data so to stored
router.delete('/:id', async (req, res) => {
	try {
		// we will delete based on id
		const restaurant = await Restaurant.deleteOne({ _id: req.params.id });
		res.json({ message: restaurant });
	} catch (error) {
		res.json({ message: error });
	}
});

/* Getting order details using get method */
router.get('/:id/orders', async (req, res) => {
	try {
		const orders = await Order.find({ restaurant_id: req.params.id })
			/* we will use populate() methods to replace a path in a document
             with actual documents
             from other collections */
			.populate('user_id')
			.populate('restaurant_id');

		res.json({ message: orders });
	} catch (error) {
		res.json({ message: error });
	}
});

/* We need to route to order from specific restaurant
 We need to apply post method to place an order
*/

router.post('/:id/orders', async (req, res) => {
	try {
		const order = new Order({
			user_id: req.body.user_id, // we will be passing id through orderSchema body
			restaurant_id: req.params.id, // database will create this id automatically
			items: req.body.items,
			total: req.body.total,
		});
		// we need to save order to stored in the database
		const savedOrder = await order.save();
		res.json(savedOrder);
	} catch (error) {
		res.json({ message: error });
	}

	/* Listing orders placed by a specific user on a restaurant using get() method */

	router.get('/:id/orders/:userId', async (req, res) => {
		try {
			const orders = await Order.find({
				restaurant_id: req.params.id,
				user_id: req.params.userId,
			})
				.populate('restaurant_id')
				.populate('user_id');
			res.json({ message: orders });
		} catch (error) {
			res.json({ message: error });
		}
	});

	/* We also need to create another route for Reviews */
	router.post('/:id/reviews', async (req, res) => {
		try {
			const already_exists_user = await Review.findOne({
				user_id: req.body.user_id,
			});

			if (already_exists_user != null) {
				res.json({ message: 'The user has already posted review' });
				return;
			}
			const review = await Review({
				user_id: req.body.user_id,
				restaurant_id: req.params.id,
				review: req.body.review,
				rating: req.body.rating,
			});
			// saving review in our database system
			const savedReview = await review.save();
			res.json({ message: savedReview });
		} catch (error) {
			res.json({ message: error });
		}
	});

	/* Listing Restaurant Review */
	router.get('/:id/reviews', async (req, res) => {
		try {
			const listedReview = await Review.find({
				restaurant_id: req.params.id,
			})
				.populate('restaurant_id')
				.populate('user_id');
			res.json({ message: listedReview });
		} catch (error) {
			res.json({ message: error });
		}
	});

	/* Deleting Restaurant Review */
	router.delete('/:id/reviews/:reviewId', async (req, res) => {
		try {
			const review = await Review.remove({ ' _id': req.params.reviewId });
			res.json({ message: review });
		} catch (error) {
			res.json({ message: error });
		}
	});
});

module.exports = router;
