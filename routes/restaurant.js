const router = require('express').Router();
const Restaurant = require('../model/Restaurant');//importing restaurant schema to get the data
const Order = require('../model/Order'); //importing orderSchema to pass user input data in the database






//  creates the restaurant and adds into the database
//  creating router to route in restaurant page

router.post('/', (req, res) => {
    // parsing data from the body of schema that we created in Restaurant model
    const restaurant = new Restaurant ({
        name: req.body.name,
        email:req.body.email,
        address: req.body.address,
        menu: req.body.menu
    });
    // we need to store and save above data in our database system
     restaurant.save()
     .then(data => {
         res.json({message:data});
     })
     .catch(error => {
         res.json({message: error})
     });
});


 /* we need to updates restaurant and menu information
 we will use algorithm for updates.
  $set will update the body field
 */

  router.patch('/:id', async(req, res) => {
      try{
        const updateRestaurant = await Restaurant.updateOne(
            {_id:req.params.id}, //id is generated by postman and will be passing through req.params
            {$set : {
                name: req.body.name,
                email: req.body.email,
                address: req.body.address,
                menu:req.body.menu
            }
         } 
        );
  
        res.json({message: updateRestaurant}); // we will be sending updated JSON file through message
      }catch(error){
          res.json({message:error})

      }
  });

  /* If we need to delete the restaurant entity we
  need to get the restaurant id and remove it */
//   we need to make asynchronous functions because we need to wait to get the user data so to stored
  router.delete('/:id', async(req, res) => {
    try{
        // we will delete based on id 
        const restaurant = await Restaurant.deleteOne({_id: req.params.id} );
        res.json({message:restaurant});

    }catch(error){
        res.json({message:error})
    }
  });



/*  
 finding the restaurants with specific id and protecting the routes adding verify
 
 */
 router.get('/:id', async (req, res) => {
    try{
        const restaurant = await Restaurant.findById(req.params.id); //id will be passing through postman body
        res.json({message: restaurant});
    }catch(error) {
        res.json({message:error})
    }
 });




/* Getting order details using get method */
router.get('/:id/orders', async (req, res) => {

    try{
        const orders = await Order.find(
            { "restaurant_id":req.params.id})
            /* we will use populate() methods to replace a path in a document
             with actual documents
             from other collections */
            .populate("user_id")
            .populate("restaurant_id");
        
        res.json({message: orders});

    }catch(error){
        res.json({message:error})
    }
});


/* We need to route to order from specific restaurant
 We need to apply post method to place an order
*/

router.post('/:id/orders', async(req, res) => {
    try{

        const order = new Order({
            user_id: req.body.user_id, // we will be passing id through orderSchema body
            restaurant_id: req.params.id, // database will create this id automatically
            items: req.body.items,
            total: req.body.total
        });
        // we need to save order to stored in the database
        const savedOrder = await order.save();
        res.json({message:order});

    }catch(error){
        res.json({message:error})
    }

} );










module.exports = router;